{"ast":null,"code":"import _objectSpread from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  parameterData: {},\n  processorOptions: {}\n};\nexport var createAudioWorkletNodeConstructor = function createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioWorkletNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioWorkletNode);\n\n    function AudioWorkletNode(context, name, options) {\n      var _this;\n\n      _classCallCheck(this, AudioWorkletNode);\n\n      var _a;\n\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var mergedOptions = sanitizeAudioWorkletNodeOptions(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options)); // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n\n      testAudioWorkletNodeOptionsClonability(mergedOptions);\n      var nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      var processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name); // Bug #186: Chrome, Edge and Opera do not allow to create an AudioWorkletNode on a closed AudioContext.\n\n      var nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n      var nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      var audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n\n      _this = _super.call(this, context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      var parameters = [];\n      nativeAudioWorkletNode.parameters.forEach(function (nativeAudioParam, nm) {\n        var audioParam = createAudioParam(_assertThisInitialized(_this), isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      _this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      _this._onprocessorerror = null;\n      _this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, _assertThisInitialized(_this));\n      }\n\n      var _getAudioNodeConnecti = getAudioNodeConnections(_assertThisInitialized(_this)),\n          activeInputs = _getAudioNodeConnecti.activeInputs;\n\n      setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n      return _this;\n    }\n\n    _createClass(AudioWorkletNode, [{\n      key: \"onprocessorerror\",\n      get: function get() {\n        return this._onprocessorerror;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n        var nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n        this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n      }\n    }, {\n      key: \"parameters\",\n      get: function get() {\n        if (this._parameters === null) {\n          // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          return this._nativeAudioWorkletNode.parameters;\n        }\n\n        return this._parameters;\n      }\n    }, {\n      key: \"port\",\n      get: function get() {\n        return this._nativeAudioWorkletNode.port;\n      }\n    }]);\n\n    return AudioWorkletNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/audio-worklet-node-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    parameterData: {},\n    processorOptions: {}\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {\n    return class AudioWorkletNode extends audioNodeConstructor {\n        constructor(context, name, options) {\n            var _a;\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS, ...options });\n            // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n            testAudioWorkletNodeOptionsClonability(mergedOptions);\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n            // Bug #186: Chrome, Edge and Opera do not allow to create an AudioWorkletNode on a closed AudioContext.\n            const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed'\n                ? nativeContext\n                : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null));\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n             * the destination.\n             */\n            if (isOffline) {\n                addUnrenderedAudioWorkletNode(nativeContext, this);\n            }\n            const { activeInputs } = getAudioNodeConnections(this);\n            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror =\n                nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener\n                    ? value\n                    : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=audio-worklet-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}