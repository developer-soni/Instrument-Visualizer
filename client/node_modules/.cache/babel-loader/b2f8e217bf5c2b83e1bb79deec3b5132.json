{"ast":null,"code":"import _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @example\n * return Tone.Offline(() => {\n * \tconst lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * }, 0.5, 1);\n * @category Source\n */\n\nexport var LFO = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(LFO, _ToneAudioNode);\n\n  var _super = _createSuper(LFO);\n\n  function LFO() {\n    var _this;\n\n    _classCallCheck(this, LFO);\n\n    _this = _super.call(this, optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n    _this.name = \"LFO\";\n    /**\n     * The value that the LFO outputs when it's stopped\n     */\n\n    _this._stoppedValue = 0;\n    /**\n     * A private placeholder for the units\n     */\n\n    _this._units = \"number\";\n    /**\n     * If the input value is converted using the [[units]]\n     */\n\n    _this.convert = true;\n    /**\n     * Private methods borrowed from Param\n     */\n    // @ts-ignore\n\n    _this._fromType = Param.prototype._fromType; // @ts-ignore\n\n    _this._toType = Param.prototype._toType; // @ts-ignore\n\n    _this._is = Param.prototype._is; // @ts-ignore\n\n    _this._clampValue = Param.prototype._clampValue;\n    var options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n    _this._oscillator = new Oscillator(options);\n    _this.frequency = _this._oscillator.frequency;\n    _this._amplitudeGain = new Gain({\n      context: _this.context,\n      gain: options.amplitude,\n      units: \"normalRange\"\n    });\n    _this.amplitude = _this._amplitudeGain.gain;\n    _this._stoppedSignal = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: 0\n    });\n    _this._zeros = new Zero({\n      context: _this.context\n    });\n    _this._a2g = new AudioToGain({\n      context: _this.context\n    });\n    _this._scaler = _this.output = new Scale({\n      context: _this.context,\n      max: options.max,\n      min: options.min\n    });\n    _this.units = options.units;\n    _this.min = options.min;\n    _this.max = options.max; // connect it up\n\n    _this._oscillator.chain(_this._amplitudeGain, _this._a2g, _this._scaler);\n\n    _this._zeros.connect(_this._a2g);\n\n    _this._stoppedSignal.connect(_this._a2g);\n\n    readOnly(_assertThisInitialized(_this), [\"amplitude\", \"frequency\"]);\n    _this.phase = options.phase;\n    return _this;\n  }\n\n  _createClass(LFO, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the LFO.\n     * @param time The time the LFO will start\n     */\n    function start(time) {\n      time = this.toSeconds(time);\n\n      this._stoppedSignal.setValueAtTime(0, time);\n\n      this._oscillator.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the LFO.\n     * @param  time The time the LFO will stop\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      time = this.toSeconds(time);\n\n      this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\n      this._oscillator.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the start/stop/pause to the transport\n     * and the frequency to the bpm of the transport\n     * @example\n     * const lfo = new Tone.LFO(\"8n\");\n     * lfo.sync().start(0);\n     * // the rate of the LFO will always be an eighth note, even as the tempo changes\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._oscillator.sync();\n\n      this._oscillator.syncFrequency();\n\n      return this;\n    }\n    /**\n     * unsync the LFO from transport control\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._oscillator.unsync();\n\n      this._oscillator.unsyncFrequency();\n\n      return this;\n    }\n    /**\n     * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform\n     */\n\n  }, {\n    key: \"_setStoppedValue\",\n    value: function _setStoppedValue() {\n      this._stoppedValue = this._oscillator.getInitialValue();\n      this._stoppedSignal.value = this._stoppedValue;\n    }\n    /**\n     * The minimum output of the LFO.\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._toType(this._scaler.min);\n    },\n    set: function set(min) {\n      min = this._fromType(min);\n      this._scaler.min = min;\n    }\n    /**\n     * The maximum output of the LFO.\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._toType(this._scaler.max);\n    },\n    set: function set(max) {\n      max = this._fromType(max);\n      this._scaler.max = max;\n    }\n    /**\n     * The type of the oscillator: See [[Oscillator.type]]\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._oscillator.type;\n    },\n    set: function set(type) {\n      this._oscillator.type = type;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The oscillator's partials array: See [[Oscillator.partials]]\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._oscillator.partials;\n    },\n    set: function set(partials) {\n      this._oscillator.partials = partials;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The phase of the LFO.\n     */\n\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._oscillator.phase;\n    },\n    set: function set(phase) {\n      this._oscillator.phase = phase;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The output units of the LFO.\n     */\n\n  }, {\n    key: \"units\",\n    get: function get() {\n      return this._units;\n    },\n    set: function set(val) {\n      var currentMin = this.min;\n      var currentMax = this.max; // convert the min and the max\n\n      this._units = val;\n      this.min = currentMin;\n      this.max = currentMax;\n    }\n    /**\n     * Returns the playback state of the source, either \"started\" or \"stopped\".\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._oscillator.state;\n    }\n    /**\n     * @param node the destination to connect to\n     * @param outputNum the optional output number\n     * @param inputNum the input number\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(node, outputNum, inputNum) {\n      if (node instanceof Param || node instanceof Signal) {\n        this.convert = node.convert;\n        this.units = node.units;\n      }\n\n      connectSignal(this, node, outputNum, inputNum);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LFO.prototype), \"dispose\", this).call(this);\n\n      this._oscillator.dispose();\n\n      this._stoppedSignal.dispose();\n\n      this._zeros.dispose();\n\n      this._scaler.dispose();\n\n      this._a2g.dispose();\n\n      this._amplitudeGain.dispose();\n\n      this.amplitude.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        amplitude: 1,\n        frequency: \"4n\",\n        max: 1,\n        min: 0,\n        type: \"sine\",\n        units: \"number\"\n      });\n    }\n  }]);\n\n  return LFO;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/source/oscillator/LFO.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @example\n * return Tone.Offline(() => {\n * \tconst lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * }, 0.5, 1);\n * @category Source\n */\nexport class LFO extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n        this.name = \"LFO\";\n        /**\n         * The value that the LFO outputs when it's stopped\n         */\n        this._stoppedValue = 0;\n        /**\n         * A private placeholder for the units\n         */\n        this._units = \"number\";\n        /**\n         * If the input value is converted using the [[units]]\n         */\n        this.convert = true;\n        /**\n         * Private methods borrowed from Param\n         */\n        // @ts-ignore\n        this._fromType = Param.prototype._fromType;\n        // @ts-ignore\n        this._toType = Param.prototype._toType;\n        // @ts-ignore\n        this._is = Param.prototype._is;\n        // @ts-ignore\n        this._clampValue = Param.prototype._clampValue;\n        const options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n        this._oscillator = new Oscillator(options);\n        this.frequency = this._oscillator.frequency;\n        this._amplitudeGain = new Gain({\n            context: this.context,\n            gain: options.amplitude,\n            units: \"normalRange\",\n        });\n        this.amplitude = this._amplitudeGain.gain;\n        this._stoppedSignal = new Signal({\n            context: this.context,\n            units: \"audioRange\",\n            value: 0,\n        });\n        this._zeros = new Zero({ context: this.context });\n        this._a2g = new AudioToGain({ context: this.context });\n        this._scaler = this.output = new Scale({\n            context: this.context,\n            max: options.max,\n            min: options.min,\n        });\n        this.units = options.units;\n        this.min = options.min;\n        this.max = options.max;\n        // connect it up\n        this._oscillator.chain(this._amplitudeGain, this._a2g, this._scaler);\n        this._zeros.connect(this._a2g);\n        this._stoppedSignal.connect(this._a2g);\n        readOnly(this, [\"amplitude\", \"frequency\"]);\n        this.phase = options.phase;\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            amplitude: 1,\n            frequency: \"4n\",\n            max: 1,\n            min: 0,\n            type: \"sine\",\n            units: \"number\",\n        });\n    }\n    /**\n     * Start the LFO.\n     * @param time The time the LFO will start\n     */\n    start(time) {\n        time = this.toSeconds(time);\n        this._stoppedSignal.setValueAtTime(0, time);\n        this._oscillator.start(time);\n        return this;\n    }\n    /**\n     * Stop the LFO.\n     * @param  time The time the LFO will stop\n     */\n    stop(time) {\n        time = this.toSeconds(time);\n        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n        this._oscillator.stop(time);\n        return this;\n    }\n    /**\n     * Sync the start/stop/pause to the transport\n     * and the frequency to the bpm of the transport\n     * @example\n     * const lfo = new Tone.LFO(\"8n\");\n     * lfo.sync().start(0);\n     * // the rate of the LFO will always be an eighth note, even as the tempo changes\n     */\n    sync() {\n        this._oscillator.sync();\n        this._oscillator.syncFrequency();\n        return this;\n    }\n    /**\n     * unsync the LFO from transport control\n     */\n    unsync() {\n        this._oscillator.unsync();\n        this._oscillator.unsyncFrequency();\n        return this;\n    }\n    /**\n     * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform\n     */\n    _setStoppedValue() {\n        this._stoppedValue = this._oscillator.getInitialValue();\n        this._stoppedSignal.value = this._stoppedValue;\n    }\n    /**\n     * The minimum output of the LFO.\n     */\n    get min() {\n        return this._toType(this._scaler.min);\n    }\n    set min(min) {\n        min = this._fromType(min);\n        this._scaler.min = min;\n    }\n    /**\n     * The maximum output of the LFO.\n     */\n    get max() {\n        return this._toType(this._scaler.max);\n    }\n    set max(max) {\n        max = this._fromType(max);\n        this._scaler.max = max;\n    }\n    /**\n     * The type of the oscillator: See [[Oscillator.type]]\n     */\n    get type() {\n        return this._oscillator.type;\n    }\n    set type(type) {\n        this._oscillator.type = type;\n        this._setStoppedValue();\n    }\n    /**\n     * The oscillator's partials array: See [[Oscillator.partials]]\n     */\n    get partials() {\n        return this._oscillator.partials;\n    }\n    set partials(partials) {\n        this._oscillator.partials = partials;\n        this._setStoppedValue();\n    }\n    /**\n     * The phase of the LFO.\n     */\n    get phase() {\n        return this._oscillator.phase;\n    }\n    set phase(phase) {\n        this._oscillator.phase = phase;\n        this._setStoppedValue();\n    }\n    /**\n     * The output units of the LFO.\n     */\n    get units() {\n        return this._units;\n    }\n    set units(val) {\n        const currentMin = this.min;\n        const currentMax = this.max;\n        // convert the min and the max\n        this._units = val;\n        this.min = currentMin;\n        this.max = currentMax;\n    }\n    /**\n     * Returns the playback state of the source, either \"started\" or \"stopped\".\n     */\n    get state() {\n        return this._oscillator.state;\n    }\n    /**\n     * @param node the destination to connect to\n     * @param outputNum the optional output number\n     * @param inputNum the input number\n     */\n    connect(node, outputNum, inputNum) {\n        if (node instanceof Param || node instanceof Signal) {\n            this.convert = node.convert;\n            this.units = node.units;\n        }\n        connectSignal(this, node, outputNum, inputNum);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._oscillator.dispose();\n        this._stoppedSignal.dispose();\n        this._zeros.dispose();\n        this._scaler.dispose();\n        this._a2g.dispose();\n        this._amplitudeGain.dispose();\n        this.amplitude.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=LFO.js.map"]},"metadata":{},"sourceType":"module"}