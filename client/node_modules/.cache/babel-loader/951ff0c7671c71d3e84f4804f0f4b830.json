{"ast":null,"code":"// 3rd party library imports\n// project imports\nimport { Visualizer } from '../Visualizers';\nexport const RGBCirclesVisualizer = new Visualizer('RGBCircles (developer-soni)', (p5, analyzer) => {\n  const width = 150;\n  const height = 150;\n  const strokeColors = ['#fff700', '#4000ff', '#00ff08', '#ff0000'];\n  const color = strokeColors[Math.floor(Math.random() * (strokeColors.length + 1))];\n  p5.background('#383737');\n  p5.stroke(String(color));\n  const values = analyzer.getValue();\n  p5.beginShape();\n\n  for (let i = 0; i < Math.min(values.length, 255); i++) {\n    const amplitude = values[i];\n    const x = p5.map(i, 0, values.length - 1, 0, width / 2); // const y = height / 2 + amplitude * height;\n\n    const y = p5.map(i, 0, values.length - 1, 0, height / 2);\n    const xAngle = p5.map(i, 0, x, -4 * Math.PI, 4 * Math.PI);\n    const yAngle = p5.map(i, 0, y, -4 * Math.PI, 4 * Math.PI);\n    const angle = xAngle * (x / width) + yAngle * (y / height);\n\n    for (let j = 0; j < 10; j++) {\n      const myX = width * -4 - width / 2 * p5.cos(2 * Math.PI * amplitude + angle);\n      const myY = height * -0.5 - height / 2 * p5.sin(2 * Math.PI * -1 * amplitude + angle);\n      p5.circle(myX + j * 115, myY, 5); // draw particle\n\n      p5.circle(myX + j * 115, myY + 1 * 150, 5); // draw particle\n    }\n  }\n\n  p5.endShape();\n});","map":{"version":3,"sources":["/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/src/visualizers/developer-soni.tsx"],"names":["Visualizer","RGBCirclesVisualizer","p5","analyzer","width","height","strokeColors","color","Math","floor","random","length","background","stroke","String","values","getValue","beginShape","i","min","amplitude","x","map","y","xAngle","PI","yAngle","angle","j","myX","cos","myY","sin","circle","endShape"],"mappings":"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","sourcesContent":["// 3rd party library imports\r\nimport P5 from 'p5';\r\nimport * as Tone from 'tone';\r\n\r\n// project imports\r\nimport {Visualizer} from '../Visualizers';\r\n\r\nexport const RGBCirclesVisualizer = new Visualizer(\r\n    'RGBCircles (developer-soni)',\r\n    (p5: P5, analyzer: Tone.Analyser) => {\r\n        const width = 150;\r\n        const height = 150;\r\n        const strokeColors = ['#fff700', '#4000ff', '#00ff08', '#ff0000']\r\n        const color = strokeColors[Math.floor(Math.random() * (strokeColors.length + 1))];\r\n\r\n        p5.background('#383737');\r\n        p5.stroke(String(color));\r\n        const values = analyzer.getValue();\r\n        p5.beginShape();\r\n\r\n        for (let i = 0; i < Math.min(values.length, 255); i++) {\r\n            const amplitude = values[i] as number;\r\n            const x = p5.map(i, 0, values.length - 1, 0, width / 2);\r\n            // const y = height / 2 + amplitude * height;\r\n            const y = p5.map(i, 0, values.length - 1, 0, height / 2);\r\n            const xAngle = p5.map(i, 0, x, -4 * Math.PI, 4 * Math.PI,);\r\n            const yAngle = p5.map(i, 0, y, -4 * Math.PI, 4 * Math.PI,);\r\n            const angle = xAngle * (x / width) + yAngle * (y / height);\r\n\r\n            for (let j = 0; j < 10; j++) {\r\n                const myX = (width*-4) - width / 2 * p5.cos(2 * Math.PI * amplitude + angle);\r\n                const myY = (height*-0.5) - height / 2 * p5.sin(2 * Math.PI * -1 * amplitude + angle);\r\n                p5.circle(myX + j * 115, myY, 5); // draw particle\r\n                p5.circle(myX + j * 115, myY + 1 * 150, 5); // draw particle\r\n            }\r\n        }\r\n\r\n        p5.endShape();\r\n    },\r\n);"]},"metadata":{},"sourceType":"module"}