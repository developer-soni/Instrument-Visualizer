{"ast":null,"code":"import _classCallCheck from\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";// 3rd party\nimport{fromJS}from'immutable';// project deps\nexport var DispatchAction=function DispatchAction(type,args){_classCallCheck(this,DispatchAction);this.type=void 0;this.args=void 0;this.type=type;this.args=fromJS(args);};/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */export function appReducer(state,action){var type=action.type,args=action.args;console.debug(\"\".concat(type));// Question: Does this function remind of you registering callbacks?\nvar newState=function(){switch(type){case'SET_SOCKET':{var oldSocket=state.get('socket');if(oldSocket){oldSocket.close();}return state.set('socket',args.get('socket'));}case'DELETE_SOCKET':{return state.delete('socket');}case'SET_SONGS':{var songs=args.get('songs');return state.set('songs',songs);}case'PLAY_SONG':{var song=state.get('songs').find(function(s){return s.get('id')===args.get('id');});console.log(song);var notes=song.get('notes');return state.set('notes',notes).set('playingSong',song);}case'STOP_SONG':{return state.delete('notes');}case'SET_LOCATION':{var _URLSearchParams$get;var pathname=args.getIn(['location','pathname'],'');var search=args.getIn(['location','search'],'');var instrumentName=pathname.substring(1);var visualizerName=(_URLSearchParams$get=new URLSearchParams(search.substring(1)).get('visualizer'))!==null&&_URLSearchParams$get!==void 0?_URLSearchParams$get:'';var instruments=state.get('instruments');var visualizers=state.get('visualizers');var instrument=instruments.find(function(i){return i.name===instrumentName;});var visualizer=visualizers.find(function(v){return v.name===visualizerName;});return state.set('instrument',instrument).set('visualizer',visualizer);}default:console.error(\"type unknown: \".concat(type,\"\\n\"),args.toJS());return state;}}();console.debug(newState.update('socket',function(s){return s?'[socket]':s;}).toJS());return newState;}","map":{"version":3,"sources":["/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/src/Reducer.tsx"],"names":["fromJS","DispatchAction","type","args","appReducer","state","action","console","debug","newState","oldSocket","get","close","set","delete","songs","song","find","s","log","notes","pathname","getIn","search","instrumentName","substring","visualizerName","URLSearchParams","instruments","visualizers","instrument","i","name","visualizer","v","error","toJS","update"],"mappings":"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","sourcesContent":["// 3rd party\nimport {List, Map, fromJS} from 'immutable';\n\n// project deps\nimport {Instrument} from './Instruments';\nimport {Visualizer} from './Visualizers';\nimport {AppState} from './State';\n\n/** ------------------------------------------------------------------------ **\n * All user input is handled by DispatchAction.\n ** ------------------------------------------------------------------------ */\n\n/**\n * Observation: pure map (compare and contrast with impure map)\n *\n * 'instrument': Instrument\n * 'visualizer': Visualizer\n * 'songs': List<string>\n * 'notes': List<{id: number, songTitle: string, notes: string}>\n */\ntype DispatchArgs = {\n    [key: string]: any;\n};\n\n// A simple algebraic data-type with string literal types\ntype DispatchActionType =\n    | 'SET_SOCKET'\n    | 'DELETE_SOCKET'\n    | 'SET_SONGS'\n    | 'PLAY_SONG'\n    | 'STOP_SONG'\n    | 'SET_LOCATION';\n\nexport class DispatchAction {\n    readonly type: DispatchActionType;\n    readonly args: Map<string, any>;\n\n    constructor(type: DispatchActionType, args?: DispatchArgs) {\n        this.type = type;\n        this.args = fromJS(args) as Map<string, any>;\n    }\n}\n\n/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */\n\nexport function appReducer(state: AppState, action: DispatchAction): AppState {\n    const {type, args} = action;\n\n    console.debug(`${type}`);\n\n    // Question: Does this function remind of you registering callbacks?\n    const newState = (() => {\n        switch (type) {\n            case 'SET_SOCKET': {\n                const oldSocket = state.get('socket');\n                if (oldSocket) {\n                    oldSocket.close();\n                }\n\n                return state.set('socket', args.get('socket'));\n            }\n            case 'DELETE_SOCKET': {\n                return state.delete('socket');\n            }\n            case 'SET_SONGS': {\n                const songs = args.get('songs');\n                return state.set('songs', songs);\n            }\n            case 'PLAY_SONG': {\n                const song = state\n                    .get('songs')\n                    .find((s: any) => s.get('id') === args.get('id'))\n                console.log(song);\n                const notes = song\n                    .get('notes');\n                return state.set('notes', notes).set('playingSong', song);\n            }\n            case 'STOP_SONG': {\n                return state.delete('notes');\n            }\n            case 'SET_LOCATION': {\n                const pathname = args.getIn(['location', 'pathname'], '') as string;\n                const search = args.getIn(['location', 'search'], '') as string;\n\n                const instrumentName: string = pathname.substring(1);\n                const visualizerName: string =\n                    new URLSearchParams(search.substring(1)).get('visualizer') ?? '';\n                const instruments: List<Instrument> = state.get('instruments');\n                const visualizers: List<Visualizer> = state.get('visualizers');\n\n                const instrument = instruments.find(i => i.name === instrumentName);\n                const visualizer = visualizers.find(v => v.name === visualizerName);\n\n                return state\n                    .set('instrument', instrument)\n                    .set('visualizer', visualizer);\n            }\n            default:\n                console.error(`type unknown: ${type}\\n`, args.toJS());\n                return state;\n        }\n    })();\n\n    console.debug(newState.update('socket', s => (s ? '[socket]' : s)).toJS());\n\n    return newState;\n}\n"]},"metadata":{},"sourceType":"module"}