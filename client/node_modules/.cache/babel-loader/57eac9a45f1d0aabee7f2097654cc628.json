{"ast":null,"code":"import _regeneratorRuntime from\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _asyncToGenerator from\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _excluded=[\"error\"];import{io as newSocket}from'socket.io-client';var SOCKET_URL='ws://localhost:3001';var SOCKET_OPTS={transports:['websocket'],path:'/ws',autoConnect:true,reconnection:true,timeout:10000};var idCounter=1;export function send(_x,_x2,_x3){return _send.apply(this,arguments);}function _send(){_send=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(socket,name,msg){var _id;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_id=idCounter++;return _context.abrupt(\"return\",new Promise(function(resolve,reject){socket.once(\"\".concat(name,\".\").concat(_id),function(resp){var error=resp.error,success=_objectWithoutProperties(resp,_excluded);if(success){resolve(success);}else{reject(error);}});socket.emit(name,_objectSpread({_id:_id},msg));}));case 2:case\"end\":return _context.stop();}}},_callee);}));return _send.apply(this,arguments);}export function initializeSocket(onConnect,onDisconnect){var socket=newSocket(SOCKET_URL,SOCKET_OPTS);socket.on('connect',function(){return onConnect(socket);});socket.on('disconnect',onDisconnect);return socket;}","map":{"version":3,"sources":["/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/src/Socket.tsx"],"names":["io","newSocket","SOCKET_URL","SOCKET_OPTS","transports","path","autoConnect","reconnection","timeout","idCounter","send","socket","name","msg","_id","Promise","resolve","reject","once","resp","error","success","emit","initializeSocket","onConnect","onDisconnect","on"],"mappings":"gmBAAA,OAASA,EAAE,GAAIC,CAAAA,SAAf,KAAoD,kBAApD,CAEA,GAAMC,CAAAA,UAAU,CAAG,qBAAnB,CAEA,GAAMC,CAAAA,WAAW,CAAG,CAClBC,UAAU,CAAE,CAAC,WAAD,CADM,CAElBC,IAAI,CAAE,KAFY,CAGlBC,WAAW,CAAE,IAHK,CAIlBC,YAAY,CAAE,IAJI,CAKlBC,OAAO,CAAE,KALS,CAApB,CAQA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CAEA,eAAsBC,CAAAA,IAAtB,iD,+EAAO,iBACLC,MADK,CAELC,IAFK,CAGLC,GAHK,0HAKCC,GALD,CAKOL,SAAS,EALhB,iCAOE,GAAIM,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCN,MAAM,CAACO,IAAP,WAAeN,IAAf,aAAuBE,GAAvB,EAA8B,SAAAK,IAAI,CAAI,CACpC,GAAQC,CAAAA,KAAR,CAA8BD,IAA9B,CAAQC,KAAR,CAAkBC,OAAlB,0BAA8BF,IAA9B,YACA,GAAIE,OAAJ,CAAa,CACXL,OAAO,CAACK,OAAD,CAAP,CACD,CAFD,IAEO,CACLJ,MAAM,CAACG,KAAD,CAAN,CACD,CACF,CAPD,EAQAT,MAAM,CAACW,IAAP,CAAYV,IAAZ,gBAAoBE,GAAG,CAAHA,GAApB,EAA4BD,GAA5B,GACD,CAVM,CAPF,wD,uCAuBP,MAAO,SAASU,CAAAA,gBAAT,CACLC,SADK,CAELC,YAFK,CAGG,CACR,GAAMd,CAAAA,MAAM,CAAGV,SAAS,CAACC,UAAD,CAAaC,WAAb,CAAxB,CAEAQ,MAAM,CAACe,EAAP,CAAU,SAAV,CAAqB,iBAAMF,CAAAA,SAAS,CAACb,MAAD,CAAf,EAArB,EACAA,MAAM,CAACe,EAAP,CAAU,YAAV,CAAwBD,YAAxB,EAEA,MAAOd,CAAAA,MAAP,CACD","sourcesContent":["import { io as newSocket, Socket as SocketIO } from 'socket.io-client';\n\nconst SOCKET_URL = 'ws://localhost:3001';\n\nconst SOCKET_OPTS = {\n  transports: ['websocket'],\n  path: '/ws',\n  autoConnect: true,\n  reconnection: true,\n  timeout: 10000,\n};\n\nlet idCounter = 1;\n\nexport async function send(\n  socket: Socket,\n  name: string,\n  msg: any,\n): Promise<any> {\n  const _id = idCounter++;\n\n  return new Promise((resolve, reject) => {\n    socket.once(`${name}.${_id}`, resp => {\n      const { error, ...success } = resp;\n      if (success) {\n        resolve(success);\n      } else {\n        reject(error);\n      }\n    });\n    socket.emit(name, { _id, ...msg });\n  });\n}\n\n\nexport type Socket = SocketIO;\n\nexport function initializeSocket(\n  onConnect: (socket: Socket) => void,\n  onDisconnect: () => void,\n): Socket {\n  const socket = newSocket(SOCKET_URL, SOCKET_OPTS);\n\n  socket.on('connect', () => onConnect(socket));\n  socket.on('disconnect', onDisconnect);\n\n  return socket;\n}\n"]},"metadata":{},"sourceType":"module"}