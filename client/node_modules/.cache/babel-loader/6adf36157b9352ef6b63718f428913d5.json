{"ast":null,"code":"import _regeneratorRuntime from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport var createTestAudioWorkletProcessorNoOutputsSupport = function createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var blob, messageChannel, offlineAudioContext, url, isCallingProcess, audioWorkletNode, oscillator;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nativeAudioWorkletNodeConstructor === null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 2:\n            if (!(nativeOfflineAudioContextConstructor === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 4:\n            blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n              type: 'application/javascript; charset=utf-8'\n            });\n            messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n\n            offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n            url = URL.createObjectURL(blob);\n            isCallingProcess = false;\n            _context.prev = 9;\n            _context.next = 12;\n            return offlineAudioContext.audioWorklet.addModule(url);\n\n          case 12:\n            audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n              numberOfOutputs: 0\n            });\n            oscillator = offlineAudioContext.createOscillator();\n            _context.next = 16;\n            return new Promise(function (resolve) {\n              audioWorkletNode.port.onmessage = function () {\n                return resolve();\n              };\n\n              audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n\n          case 16:\n            audioWorkletNode.port.onmessage = function () {\n              return isCallingProcess = true;\n            };\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            _context.next = 21;\n            return offlineAudioContext.startRendering();\n\n          case 21:\n            _context.next = 23;\n            return new Promise(function (resolve) {\n              messageChannel.port1.onmessage = function (_ref2) {\n                var data = _ref2.data;\n                return resolve(data === 1);\n              };\n\n              messageChannel.port1.postMessage(0);\n            });\n\n          case 23:\n            isCallingProcess = _context.sent;\n            _context.next = 28;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](9);\n\n          case 28:\n            _context.prev = 28;\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n            return _context.finish(28);\n\n          case 32:\n            return _context.abrupt(\"return\", isCallingProcess);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 26, 28, 32]]);\n  }));\n};","map":{"version":3,"sources":["../../../src/factories/test-audio-worklet-processor-no-outputs-support.ts"],"names":[],"mappings":";;;AAEA;;;AAGG;AACH,OAAO,IAAM,+CAA+C,GAAsD,SAArG,+CAAqG,CAC9G,iCAD8G,EAE9G,oCAF8G,EAG9G;AACA,+EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEC,iCAAiC,KAAK,IAFvC;AAAA;AAAA;AAAA;;AAAA,6CAGQ,IAHR;;AAAA;AAAA,kBAMC,oCAAoC,KAAK,IAN1C;AAAA;AAAA;AAAA;;AAAA,6CAOQ,KAPR;;AAAA;AAUG,YAAA,IAVH,GAUU,IAAI,IAAJ,CACT,CACI,uNADJ,CADS,EAIT;AACI,cAAA,IAAI,EAAE;AADV,aAJS,CAVV;AAkBG,YAAA,cAlBH,GAkBoB,IAAI,cAAJ,EAlBpB,EAmBH;;AACM,YAAA,mBApBH,GAoByB,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,GAA5C,EAAiD,KAAjD,CApBzB;AAqBG,YAAA,GArBH,GAqBS,GAAG,CAAC,eAAJ,CAAoB,IAApB,CArBT;AAuBC,YAAA,gBAvBD,GAuBoB,KAvBpB;AAAA;AAAA;AAAA,mBA0BO,mBAAmB,CAAC,YAApB,CAAiC,SAAjC,CAA2C,GAA3C,CA1BP;;AAAA;AA4BO,YAAA,gBA5BP,GA4B0B,IAAI,iCAAJ,CAAsC,mBAAtC,EAA2D,GAA3D,EAAgE;AAAE,cAAA,eAAe,EAAE;AAAnB,aAAhE,CA5B1B;AA6BO,YAAA,UA7BP,GA6BoB,mBAAmB,CAAC,gBAApB,EA7BpB;AAAA;AAAA,mBA+BO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAY;AAChC,cAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC;AAAA,uBAAM,OAAO,EAAb;AAAA,eAAlC;;AACA,cAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB,CAAkC,cAAc,CAAC,KAAjD,EAAwD,CAAC,cAAc,CAAC,KAAhB,CAAxD;AACH,aAHK,CA/BP;;AAAA;AAoCC,YAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB,GAAkC;AAAA,qBAAO,gBAAgB,GAAG,IAA1B;AAAA,aAAlC;;AAEA,YAAA,UAAU,CAAC,OAAX,CAAmB,gBAAnB;AACA,YAAA,UAAU,CAAC,KAAX,CAAiB,CAAjB;AAvCD;AAAA,mBAyCO,mBAAmB,CAAC,cAApB,EAzCP;;AAAA;AAAA;AAAA,mBA2C0B,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AAC7C,cAAA,cAAc,CAAC,KAAf,CAAqB,SAArB,GAAiC;AAAA,oBAAG,IAAH,SAAG,IAAH;AAAA,uBAAc,OAAO,CAAC,IAAI,KAAK,CAAV,CAArB;AAAA,eAAjC;;AACA,cAAA,cAAc,CAAC,KAAf,CAAqB,WAArB,CAAiC,CAAjC;AACH,aAHwB,CA3C1B;;AAAA;AA2CC,YAAA,gBA3CD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkDC,YAAA,cAAc,CAAC,KAAf,CAAqB,KAArB;AACA,YAAA,GAAG,CAAC,eAAJ,CAAoB,GAApB;AAnDD;;AAAA;AAAA,6CAsDI,gBAtDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwDH,CA5DM","sourceRoot":"","sourcesContent":["/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob([\n            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n        ], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isCallingProcess = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            await new Promise((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n        return isCallingProcess;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-no-outputs-support.js.map"]},"metadata":{},"sourceType":"module"}