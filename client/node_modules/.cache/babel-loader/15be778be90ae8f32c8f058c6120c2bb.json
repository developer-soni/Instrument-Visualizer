{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nexport var createAudioParamRenderer = function createAudioParamRenderer(automationEventList) {\n  return {\n    replay: function replay(audioParam) {\n      var _iterator = _createForOfIteratorHelper(automationEventList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var automationEvent = _step.value;\n\n          if (automationEvent.type === 'exponentialRampToValue') {\n            var endTime = automationEvent.endTime,\n                value = automationEvent.value;\n            audioParam.exponentialRampToValueAtTime(value, endTime);\n          } else if (automationEvent.type === 'linearRampToValue') {\n            var _endTime = automationEvent.endTime,\n                _value = automationEvent.value;\n            audioParam.linearRampToValueAtTime(_value, _endTime);\n          } else if (automationEvent.type === 'setTarget') {\n            var startTime = automationEvent.startTime,\n                target = automationEvent.target,\n                timeConstant = automationEvent.timeConstant;\n            audioParam.setTargetAtTime(target, startTime, timeConstant);\n          } else if (automationEvent.type === 'setValue') {\n            var _startTime = automationEvent.startTime,\n                _value2 = automationEvent.value;\n            audioParam.setValueAtTime(_value2, _startTime);\n          } else if (automationEvent.type === 'setValueCurve') {\n            var duration = automationEvent.duration,\n                _startTime2 = automationEvent.startTime,\n                values = automationEvent.values;\n            audioParam.setValueCurveAtTime(values, _startTime2, duration);\n          } else {\n            throw new Error(\"Can't apply an unknown automation.\");\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  };\n};","map":{"version":3,"sources":["../../../src/factories/audio-param-renderer.ts"],"names":[],"mappings":";AAEA,OAAO,IAAM,wBAAwB,GAA+B,SAAvD,wBAAuD,CAAC,mBAAD,EAAwB;AACxF,SAAO;AACH,IAAA,MADG,kBACI,UADJ,EACiC;AAAA,iDACF,mBADE;AAAA;;AAAA;AAChC,4DAAmD;AAAA,cAAxC,eAAwC;;AAC/C,cAAI,eAAe,CAAC,IAAhB,KAAyB,wBAA7B,EAAuD;AACnD,gBAAQ,OAAR,GAA2B,eAA3B,CAAQ,OAAR;AAAA,gBAAiB,KAAjB,GAA2B,eAA3B,CAAiB,KAAjB;AAEA,YAAA,UAAU,CAAC,4BAAX,CAAwC,KAAxC,EAA+C,OAA/C;AACH,WAJD,MAIO,IAAI,eAAe,CAAC,IAAhB,KAAyB,mBAA7B,EAAkD;AACrD,gBAAQ,QAAR,GAA2B,eAA3B,CAAQ,OAAR;AAAA,gBAAiB,MAAjB,GAA2B,eAA3B,CAAiB,KAAjB;AAEA,YAAA,UAAU,CAAC,uBAAX,CAAmC,MAAnC,EAA0C,QAA1C;AACH,WAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,WAA7B,EAA0C;AAC7C,gBAAQ,SAAR,GAA4C,eAA5C,CAAQ,SAAR;AAAA,gBAAmB,MAAnB,GAA4C,eAA5C,CAAmB,MAAnB;AAAA,gBAA2B,YAA3B,GAA4C,eAA5C,CAA2B,YAA3B;AAEA,YAAA,UAAU,CAAC,eAAX,CAA2B,MAA3B,EAAmC,SAAnC,EAA8C,YAA9C;AACH,WAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,UAA7B,EAAyC;AAC5C,gBAAQ,UAAR,GAA6B,eAA7B,CAAQ,SAAR;AAAA,gBAAmB,OAAnB,GAA6B,eAA7B,CAAmB,KAAnB;AAEA,YAAA,UAAU,CAAC,cAAX,CAA0B,OAA1B,EAAiC,UAAjC;AACH,WAJM,MAIA,IAAI,eAAe,CAAC,IAAhB,KAAyB,eAA7B,EAA8C;AACjD,gBAAQ,QAAR,GAAwC,eAAxC,CAAQ,QAAR;AAAA,gBAAkB,WAAlB,GAAwC,eAAxC,CAAkB,SAAlB;AAAA,gBAA6B,MAA7B,GAAwC,eAAxC,CAA6B,MAA7B;AAEA,YAAA,UAAU,CAAC,mBAAX,CAA+B,MAA/B,EAAuC,WAAvC,EAAkD,QAAlD;AACH,WAJM,MAIA;AACH,kBAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACH;AACJ;AAzB+B;AAAA;AAAA;AAAA;AAAA;AA0BnC;AA3BE,GAAP;AA6BH,CA9BM","sourceRoot":"","sourcesContent":["export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-param-renderer.js.map"]},"metadata":{},"sourceType":"module"}