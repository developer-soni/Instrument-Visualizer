{"ast":null,"code":"import _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\n\nexport var TicksClass = /*#__PURE__*/function (_TransportTimeClass) {\n  _inherits(TicksClass, _TransportTimeClass);\n\n  var _super = _createSuper(TicksClass);\n\n  function TicksClass() {\n    var _this;\n\n    _classCallCheck(this, TicksClass);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Ticks\";\n    _this.defaultUnits = \"i\";\n    return _this;\n  }\n  /**\n   * Get the current time in the given units\n   */\n\n\n  _createClass(TicksClass, [{\n    key: \"_now\",\n    value: function _now() {\n      return this.context.transport.ticks;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return this._getPPQ() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ticks;\n    }\n    /**\n     * Return the time in ticks\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks() {\n      return this.valueOf();\n    }\n    /**\n     * Return the time in seconds\n     */\n\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds() {\n      return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n    }\n  }]);\n\n  return TicksClass;\n}(TransportTimeClass);\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\n\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}","map":{"version":3,"sources":["../../../../Tone/core/type/Ticks.ts"],"names":[],"mappings":";;;;AAAA,SAAS,UAAT,QAA2B,WAA3B;AAEA,SAAS,kBAAT,QAAmC,iBAAnC;AAGA;;;;;;;AAOG;;AACH,WAAa,UAAb;AAAA;;AAAA;;AAAA,wBAAA;AAAA;;AAAA;;;AAEU,UAAA,IAAA,GAAe,OAAf;AAEA,UAAA,YAAA,GAA6B,GAA7B;AAJV;AA+CC;AAzCA;;AAEG;;;AARJ;AAAA;AAAA,WASW,gBAAI;AACb,aAAO,KAAK,OAAL,CAAa,SAAb,CAAuB,KAA9B;AACA;AAED;;AAEG;;AAfJ;AAAA;AAAA,WAgBW,uBAAc,KAAd,EAA2B;AACpC,aAAO,KAAK,OAAL,KAAiB,KAAxB;AACA;AAED;;AAEG;;AAtBJ;AAAA;AAAA,WAuBW,yBAAgB,OAAhB,EAAgC;AACzC,aAAO,IAAI,CAAC,KAAL,CAAW,OAAO,IAAI,KAAK,KAAK,OAAL,EAAT,CAAP,GAAkC,KAAK,OAAL,EAA7C,CAAP;AACA;AAED;;AAEG;;AA7BJ;AAAA;AAAA,WA8BW,uBAAc,KAAd,EAA0B;AACnC,aAAO,KAAP;AACA;AAED;;AAEG;;AApCJ;AAAA;AAAA,WAqCC,mBAAO;AACN,aAAO,KAAK,OAAL,EAAP;AACA;AAED;;AAEG;;AA3CJ;AAAA;AAAA,WA4CC,qBAAS;AACR,aAAQ,KAAK,OAAL,KAAiB,KAAK,OAAL,EAAlB,IAAqC,KAAK,KAAK,OAAL,EAA1C,CAAP;AACA;AA9CF;;AAAA;AAAA,EAAgC,kBAAhC;AAiDA;;;AAGG;;AACH,OAAM,SAAU,KAAV,CAAgB,KAAhB,EAAmC,KAAnC,EAAuD;AAC5D,SAAO,IAAI,UAAJ,CAAe,UAAU,EAAzB,EAA6B,KAA7B,EAAoC,KAApC,CAAP;AACA","sourceRoot":"","sourcesContent":["import { getContext } from \"../Global\";\nimport { TransportTimeClass } from \"./TransportTime\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"Ticks\";\n        this.defaultUnits = \"i\";\n    }\n    /**\n     * Get the current time in the given units\n     */\n    _now() {\n        return this.context.transport.ticks;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return this._getPPQ() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return ticks;\n    }\n    /**\n     * Return the time in ticks\n     */\n    toTicks() {\n        return this.valueOf();\n    }\n    /**\n     * Return the time in seconds\n     */\n    toSeconds() {\n        return (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n    }\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value, units) {\n    return new TicksClass(getContext(), value, units);\n}\n//# sourceMappingURL=Ticks.js.map"]},"metadata":{},"sourceType":"module"}