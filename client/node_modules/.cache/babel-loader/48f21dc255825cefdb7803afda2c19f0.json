{"ast":null,"code":"// 3rd party\nimport { fromJS } from 'immutable'; // project deps\n\nexport class DispatchAction {\n  constructor(type, args) {\n    this.type = void 0;\n    this.args = void 0;\n    this.type = type;\n    this.args = fromJS(args);\n  }\n\n}\n/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */\n\nexport function appReducer(state, action) {\n  const {\n    type,\n    args\n  } = action;\n  console.debug(`${type}`); // Question: Does this function remind of you registering callbacks?\n\n  const newState = (() => {\n    switch (type) {\n      case 'SET_SOCKET':\n        {\n          const oldSocket = state.get('socket');\n\n          if (oldSocket) {\n            oldSocket.close();\n          }\n\n          return state.set('socket', args.get('socket'));\n        }\n\n      case 'DELETE_SOCKET':\n        {\n          return state.delete('socket');\n        }\n\n      case 'SET_SONGS':\n        {\n          const songs = args.get('songs');\n          return state.set('songs', songs);\n        }\n\n      case 'PLAY_SONG':\n        {\n          const song = state.get('songs').find(s => s.get('id') === args.get('id'));\n          console.log(song);\n          const notes = song.get('notes');\n          return state.set('notes', notes).set('playingSong', song);\n        }\n\n      case 'STOP_SONG':\n        {\n          return state.delete('notes');\n        }\n\n      case 'SET_LOCATION':\n        {\n          var _URLSearchParams$get;\n\n          const pathname = args.getIn(['location', 'pathname'], '');\n          const search = args.getIn(['location', 'search'], '');\n          const instrumentName = pathname.substring(1);\n          const visualizerName = (_URLSearchParams$get = new URLSearchParams(search.substring(1)).get('visualizer')) !== null && _URLSearchParams$get !== void 0 ? _URLSearchParams$get : '';\n          const instruments = state.get('instruments');\n          const visualizers = state.get('visualizers');\n          const instrument = instruments.find(i => i.name === instrumentName);\n          const visualizer = visualizers.find(v => v.name === visualizerName);\n          return state.set('instrument', instrument).set('visualizer', visualizer);\n        }\n\n      default:\n        console.error(`type unknown: ${type}\\n`, args.toJS());\n        return state;\n    }\n  })();\n\n  console.debug(newState.update('socket', s => s ? '[socket]' : s).toJS());\n  return newState;\n}","map":{"version":3,"sources":["/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/src/Reducer.tsx"],"names":["fromJS","DispatchAction","constructor","type","args","appReducer","state","action","console","debug","newState","oldSocket","get","close","set","delete","songs","song","find","s","log","notes","pathname","getIn","search","instrumentName","substring","visualizerName","URLSearchParams","instruments","visualizers","instrument","i","name","visualizer","v","error","toJS","update"],"mappings":"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","sourcesContent":["// 3rd party\nimport {List, Map, fromJS} from 'immutable';\n\n// project deps\nimport {Instrument} from './Instruments';\nimport {Visualizer} from './Visualizers';\nimport {AppState} from './State';\n\n/** ------------------------------------------------------------------------ **\n * All user input is handled by DispatchAction.\n ** ------------------------------------------------------------------------ */\n\n/**\n * Observation: pure map (compare and contrast with impure map)\n *\n * 'instrument': Instrument\n * 'visualizer': Visualizer\n * 'songs': List<string>\n * 'notes': List<{id: number, songTitle: string, notes: string}>\n */\ntype DispatchArgs = {\n    [key: string]: any;\n};\n\n// A simple algebraic data-type with string literal types\ntype DispatchActionType =\n    | 'SET_SOCKET'\n    | 'DELETE_SOCKET'\n    | 'SET_SONGS'\n    | 'PLAY_SONG'\n    | 'STOP_SONG'\n    | 'SET_LOCATION';\n\nexport class DispatchAction {\n    readonly type: DispatchActionType;\n    readonly args: Map<string, any>;\n\n    constructor(type: DispatchActionType, args?: DispatchArgs) {\n        this.type = type;\n        this.args = fromJS(args) as Map<string, any>;\n    }\n}\n\n/** ------------------------------------------------------------------------ **\n * Top-level application reducer.\n ** ------------------------------------------------------------------------ */\n\nexport function appReducer(state: AppState, action: DispatchAction): AppState {\n    const {type, args} = action;\n\n    console.debug(`${type}`);\n\n    // Question: Does this function remind of you registering callbacks?\n    const newState = (() => {\n        switch (type) {\n            case 'SET_SOCKET': {\n                const oldSocket = state.get('socket');\n                if (oldSocket) {\n                    oldSocket.close();\n                }\n\n                return state.set('socket', args.get('socket'));\n            }\n            case 'DELETE_SOCKET': {\n                return state.delete('socket');\n            }\n            case 'SET_SONGS': {\n                const songs = args.get('songs');\n                return state.set('songs', songs);\n            }\n            case 'PLAY_SONG': {\n                const song = state\n                    .get('songs')\n                    .find((s: any) => s.get('id') === args.get('id'))\n                console.log(song);\n                const notes = song\n                    .get('notes');\n                return state.set('notes', notes).set('playingSong', song);\n            }\n            case 'STOP_SONG': {\n                return state.delete('notes');\n            }\n            case 'SET_LOCATION': {\n                const pathname = args.getIn(['location', 'pathname'], '') as string;\n                const search = args.getIn(['location', 'search'], '') as string;\n\n                const instrumentName: string = pathname.substring(1);\n                const visualizerName: string =\n                    new URLSearchParams(search.substring(1)).get('visualizer') ?? '';\n                const instruments: List<Instrument> = state.get('instruments');\n                const visualizers: List<Visualizer> = state.get('visualizers');\n\n                const instrument = instruments.find(i => i.name === instrumentName);\n                const visualizer = visualizers.find(v => v.name === visualizerName);\n\n                return state\n                    .set('instrument', instrument)\n                    .set('visualizer', visualizer);\n            }\n            default:\n                console.error(`type unknown: ${type}\\n`, args.toJS());\n                return state;\n        }\n    })();\n\n    console.debug(newState.update('socket', s => (s ? '[socket]' : s)).toJS());\n\n    return newState;\n}\n"]},"metadata":{},"sourceType":"module"}