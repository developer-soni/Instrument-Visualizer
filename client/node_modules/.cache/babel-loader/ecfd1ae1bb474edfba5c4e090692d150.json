{"ast":null,"code":"import _regeneratorRuntime from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport var DummyContext = /*#__PURE__*/function (_BaseContext) {\n  _inherits(DummyContext, _BaseContext);\n\n  var _super = _createSuper(DummyContext);\n\n  function DummyContext() {\n    var _this;\n\n    _classCallCheck(this, DummyContext);\n\n    _this = _super.apply(this, arguments);\n    _this.lookAhead = 0;\n    _this.latencyHint = 0;\n    _this.isOffline = false;\n    return _this;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  _createClass(DummyContext, [{\n    key: \"createAnalyser\",\n    value: function createAnalyser() {\n      return {};\n    }\n  }, {\n    key: \"createOscillator\",\n    value: function createOscillator() {\n      return {};\n    }\n  }, {\n    key: \"createBufferSource\",\n    value: function createBufferSource() {\n      return {};\n    }\n  }, {\n    key: \"createBiquadFilter\",\n    value: function createBiquadFilter() {\n      return {};\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(_numberOfChannels, _length, _sampleRate) {\n      return {};\n    }\n  }, {\n    key: \"createChannelMerger\",\n    value: function createChannelMerger(_numberOfInputs) {\n      return {};\n    }\n  }, {\n    key: \"createChannelSplitter\",\n    value: function createChannelSplitter(_numberOfOutputs) {\n      return {};\n    }\n  }, {\n    key: \"createConstantSource\",\n    value: function createConstantSource() {\n      return {};\n    }\n  }, {\n    key: \"createConvolver\",\n    value: function createConvolver() {\n      return {};\n    }\n  }, {\n    key: \"createDelay\",\n    value: function createDelay(_maxDelayTime) {\n      return {};\n    }\n  }, {\n    key: \"createDynamicsCompressor\",\n    value: function createDynamicsCompressor() {\n      return {};\n    }\n  }, {\n    key: \"createGain\",\n    value: function createGain() {\n      return {};\n    }\n  }, {\n    key: \"createIIRFilter\",\n    value: function createIIRFilter(_feedForward, _feedback) {\n      return {};\n    }\n  }, {\n    key: \"createPanner\",\n    value: function createPanner() {\n      return {};\n    }\n  }, {\n    key: \"createPeriodicWave\",\n    value: function createPeriodicWave(_real, _imag, _constraints) {\n      return {};\n    }\n  }, {\n    key: \"createStereoPanner\",\n    value: function createStereoPanner() {\n      return {};\n    }\n  }, {\n    key: \"createWaveShaper\",\n    value: function createWaveShaper() {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamSource\",\n    value: function createMediaStreamSource(_stream) {\n      return {};\n    }\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(_element) {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamDestination\",\n    value: function createMediaStreamDestination() {\n      return {};\n    }\n  }, {\n    key: \"decodeAudioData\",\n    value: function decodeAudioData(_audioData) {\n      return Promise.resolve({});\n    } //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n\n  }, {\n    key: \"createAudioWorkletNode\",\n    value: function createAudioWorkletNode(_name, _options) {\n      return {};\n    }\n  }, {\n    key: \"rawContext\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"addAudioWorkletModule\",\n    value: function addAudioWorkletModule(_url, _name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Promise.resolve());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(_fn, _timeout) {\n      return 0;\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function clearTimeout(_id) {\n      return this;\n    }\n  }, {\n    key: \"setInterval\",\n    value: function setInterval(_fn, _interval) {\n      return 0;\n    }\n  }, {\n    key: \"clearInterval\",\n    value: function clearInterval(_id) {\n      return this;\n    }\n  }, {\n    key: \"getConstant\",\n    value: function getConstant(_val) {\n      return {};\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"sampleRate\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"listener\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"transport\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"draw\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"now\",\n    value: function now() {\n      return 0;\n    }\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return 0;\n    }\n  }]);\n\n  return DummyContext;\n}(BaseContext);","map":{"version":3,"sources":["../../../../Tone/core/context/DummyContext.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n    constructor() {\n        super(...arguments);\n        this.lookAhead = 0;\n        this.latencyHint = 0;\n        this.isOffline = false;\n    }\n    //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAnalyser() {\n        return {};\n    }\n    createOscillator() {\n        return {};\n    }\n    createBufferSource() {\n        return {};\n    }\n    createBiquadFilter() {\n        return {};\n    }\n    createBuffer(_numberOfChannels, _length, _sampleRate) {\n        return {};\n    }\n    createChannelMerger(_numberOfInputs) {\n        return {};\n    }\n    createChannelSplitter(_numberOfOutputs) {\n        return {};\n    }\n    createConstantSource() {\n        return {};\n    }\n    createConvolver() {\n        return {};\n    }\n    createDelay(_maxDelayTime) {\n        return {};\n    }\n    createDynamicsCompressor() {\n        return {};\n    }\n    createGain() {\n        return {};\n    }\n    createIIRFilter(_feedForward, _feedback) {\n        return {};\n    }\n    createPanner() {\n        return {};\n    }\n    createPeriodicWave(_real, _imag, _constraints) {\n        return {};\n    }\n    createStereoPanner() {\n        return {};\n    }\n    createWaveShaper() {\n        return {};\n    }\n    createMediaStreamSource(_stream) {\n        return {};\n    }\n    createMediaElementSource(_element) {\n        return {};\n    }\n    createMediaStreamDestination() {\n        return {};\n    }\n    decodeAudioData(_audioData) {\n        return Promise.resolve({});\n    }\n    //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAudioWorkletNode(_name, _options) {\n        return {};\n    }\n    get rawContext() {\n        return {};\n    }\n    addAudioWorkletModule(_url, _name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve();\n        });\n    }\n    resume() {\n        return Promise.resolve();\n    }\n    setTimeout(_fn, _timeout) {\n        return 0;\n    }\n    clearTimeout(_id) {\n        return this;\n    }\n    setInterval(_fn, _interval) {\n        return 0;\n    }\n    clearInterval(_id) {\n        return this;\n    }\n    getConstant(_val) {\n        return {};\n    }\n    get currentTime() {\n        return 0;\n    }\n    get state() {\n        return {};\n    }\n    get sampleRate() {\n        return 0;\n    }\n    get listener() {\n        return {};\n    }\n    get transport() {\n        return {};\n    }\n    get draw() {\n        return {};\n    }\n    set draw(_d) { }\n    get destination() {\n        return {};\n    }\n    set destination(_d) { }\n    now() {\n        return 0;\n    }\n    immediate() {\n        return 0;\n    }\n}\n//# sourceMappingURL=DummyContext.js.map"]},"metadata":{},"sourceType":"module"}