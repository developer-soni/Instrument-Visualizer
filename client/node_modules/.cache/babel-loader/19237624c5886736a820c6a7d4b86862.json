{"ast":null,"code":"import _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\n\nexport var Mono = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Mono, _ToneAudioNode);\n\n  var _super = _createSuper(Mono);\n\n  function Mono() {\n    var _this;\n\n    _classCallCheck(this, Mono);\n\n    _this = _super.call(this, optionsFromArguments(Mono.getDefaults(), arguments));\n    _this.name = \"Mono\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._merge = _this.output = new Merge({\n      channels: 2,\n      context: _this.context\n    });\n\n    _this.input.connect(_this._merge, 0, 0);\n\n    _this.input.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  _createClass(Mono, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Mono.prototype), \"dispose\", this).call(this);\n\n      this._merge.dispose();\n\n      this.input.dispose();\n      return this;\n    }\n  }]);\n\n  return Mono;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/channel/Mono.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,IAAT,QAAqB,yBAArB;AACA,SAAqB,aAArB,QAAgE,kCAAhE;AACA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,KAAT,QAAsB,SAAtB;AAIA;;;;;AAKG;;AACH,WAAa,IAAb;AAAA;;AAAA;;AAoBC,kBAAA;AAAA;;AAAA;;AAEC,8BAAM,oBAAoB,CAAC,IAAI,CAAC,WAAL,EAAD,EAAqB,SAArB,CAA1B;AApBQ,UAAA,IAAA,GAAe,MAAf;AAsBR,UAAK,KAAL,GAAa,IAAI,IAAJ,CAAS;AAAE,MAAA,OAAO,EAAE,MAAK;AAAhB,KAAT,CAAb;AAEA,UAAK,MAAL,GAAc,MAAK,MAAL,GAAc,IAAI,KAAJ,CAAU;AACrC,MAAA,QAAQ,EAAE,CAD2B;AAErC,MAAA,OAAO,EAAE,MAAK;AAFuB,KAAV,CAA5B;;AAKA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;;AACA,UAAK,KAAL,CAAW,OAAX,CAAmB,MAAK,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;;AAZD;AAaC;;AAjCF;AAAA;AAAA,WAmCC,mBAAO;AACN;;AACA,WAAK,MAAL,CAAY,OAAZ;;AACA,WAAK,KAAL,CAAW,OAAX;AACA,aAAO,IAAP;AACA;AAxCF;;AAAA;AAAA,EAA0B,aAA1B","sourceRoot":"","sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(Mono.getDefaults(), arguments));\n        this.name = \"Mono\";\n        this.input = new Gain({ context: this.context });\n        this._merge = this.output = new Merge({\n            channels: 2,\n            context: this.context,\n        });\n        this.input.connect(this._merge, 0, 0);\n        this.input.connect(this._merge, 0, 1);\n    }\n    dispose() {\n        super.dispose();\n        this._merge.dispose();\n        this.input.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Mono.js.map"]},"metadata":{},"sourceType":"module"}