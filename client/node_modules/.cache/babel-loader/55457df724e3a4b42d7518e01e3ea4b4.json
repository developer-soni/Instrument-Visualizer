{"ast":null,"code":"var _classCallCheck = require(\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transport = require(\"../transport\");\n\nvar parseqs = require(\"parseqs\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar yeast = require(\"yeast\");\n\nvar debug = require(\"debug\")(\"engine.io-client:polling\");\n\nvar Polling = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(Polling, _Transport);\n\n  var _super = _createSuper(Polling);\n\n  function Polling() {\n    _classCallCheck(this, Polling);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Polling, [{\n    key: \"name\",\n    get:\n    /**\n     * Transport name.\n     */\n    function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this.poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} callback upon buffers are flushed and transport is paused\n     * @api private\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this = this;\n\n      this.readyState = \"pausing\";\n\n      var pause = function pause() {\n        debug(\"paused\");\n        _this.readyState = \"paused\";\n        onPause();\n      };\n\n      if (this.polling || !this.writable) {\n        var total = 0;\n\n        if (this.polling) {\n          debug(\"we are currently polling - waiting to pause\");\n          total++;\n          this.once(\"pollComplete\", function () {\n            debug(\"pre-pause polling complete\");\n            --total || pause();\n          });\n        }\n\n        if (!this.writable) {\n          debug(\"we are currently writing - waiting to pause\");\n          total++;\n          this.once(\"drain\", function () {\n            debug(\"pre-pause writing complete\");\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @api public\n     */\n\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      debug(\"polling\");\n      this.polling = true;\n      this.doPoll();\n      this.emit(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this2 = this;\n\n      debug(\"polling got data %s\", data);\n\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this2.readyState && packet.type === \"open\") {\n          _this2.onOpen();\n        } // if its a close packet, we close the ongoing requests\n\n\n        if (\"close\" === packet.type) {\n          _this2.onClose();\n\n          return false;\n        } // otherwise bypass onData and handle the message\n\n\n        _this2.onPacket(packet);\n      }; // decode payload\n\n\n      parser.decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this.polling = false;\n        this.emit(\"pollComplete\");\n\n        if (\"open\" === this.readyState) {\n          this.poll();\n        } else {\n          debug('ignoring poll - transport state \"%s\"', this.readyState);\n        }\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this3 = this;\n\n      var close = function close() {\n        debug(\"writing close packet\");\n\n        _this3.write([{\n          type: \"close\"\n        }]);\n      };\n\n      if (\"open\" === this.readyState) {\n        debug(\"transport open - closing\");\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        debug(\"transport not open - deferring close\");\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} data packets\n     * @param {Function} drain callback\n     * @api private\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this4 = this;\n\n      this.writable = false;\n      parser.encodePayload(packets, function (data) {\n        _this4.doWrite(data, function () {\n          _this4.writable = true;\n\n          _this4.emit(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var port = \"\"; // cache busting is forced\n\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n\n      query = parseqs.encode(query); // avoid port if default for schema\n\n      if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      } // prepend ? to query\n\n\n      if (query.length) {\n        query = \"?\" + query;\n      }\n\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n    }\n  }]);\n\n  return Polling;\n}(Transport);\n\nmodule.exports = Polling;","map":{"version":3,"sources":["/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/engine.io-client/lib/transports/polling.js"],"names":["Transport","require","parseqs","parser","yeast","debug","Polling","poll","onPause","readyState","pause","polling","writable","total","once","doPoll","emit","data","callback","packet","type","onOpen","onClose","onPacket","decodePayload","socket","binaryType","forEach","close","write","packets","encodePayload","doWrite","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","encode","Number","length","ipv6","hostname","indexOf","path","module","exports"],"mappings":"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","sourcesContent":["const Transport = require(\"../transport\");\nconst parseqs = require(\"parseqs\");\nconst parser = require(\"engine.io-parser\");\nconst yeast = require(\"yeast\");\n\nconst debug = require(\"debug\")(\"engine.io-client:polling\");\n\nclass Polling extends Transport {\n  /**\n   * Transport name.\n   */\n  get name() {\n    return \"polling\";\n  }\n\n  /**\n   * Opens the socket (triggers polling). We write a PING message to determine\n   * when the transport is open.\n   *\n   * @api private\n   */\n  doOpen() {\n    this.poll();\n  }\n\n  /**\n   * Pauses polling.\n   *\n   * @param {Function} callback upon buffers are flushed and transport is paused\n   * @api private\n   */\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      debug(\"paused\");\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        debug(\"we are currently polling - waiting to pause\");\n        total++;\n        this.once(\"pollComplete\", function() {\n          debug(\"pre-pause polling complete\");\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        debug(\"we are currently writing - waiting to pause\");\n        total++;\n        this.once(\"drain\", function() {\n          debug(\"pre-pause writing complete\");\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n\n  /**\n   * Starts polling cycle.\n   *\n   * @api public\n   */\n  poll() {\n    debug(\"polling\");\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n\n  /**\n   * Overloads onData to detect payloads.\n   *\n   * @api private\n   */\n  onData(data) {\n    debug(\"polling got data %s\", data);\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      }\n\n      // if its a close packet, we close the ongoing requests\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      }\n\n      // otherwise bypass onData and handle the message\n      this.onPacket(packet);\n    };\n\n    // decode payload\n    parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n    // if an event did not trigger closing\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {\n        debug('ignoring poll - transport state \"%s\"', this.readyState);\n      }\n    }\n  }\n\n  /**\n   * For polling, send a close packet.\n   *\n   * @api private\n   */\n  doClose() {\n    const close = () => {\n      debug(\"writing close packet\");\n      this.write([{ type: \"close\" }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      debug(\"transport open - closing\");\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      debug(\"transport not open - deferring close\");\n      this.once(\"open\", close);\n    }\n  }\n\n  /**\n   * Writes a packets payload.\n   *\n   * @param {Array} data packets\n   * @param {Function} drain callback\n   * @api private\n   */\n  write(packets) {\n    this.writable = false;\n\n    parser.encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\";\n\n    // cache busting is forced\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    }\n\n    query = parseqs.encode(query);\n\n    // avoid port if default for schema\n    if (\n      this.opts.port &&\n      ((\"https\" === schema && Number(this.opts.port) !== 443) ||\n        (\"http\" === schema && Number(this.opts.port) !== 80))\n    ) {\n      port = \":\" + this.opts.port;\n    }\n\n    // prepend ? to query\n    if (query.length) {\n      query = \"?\" + query;\n    }\n\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return (\n      schema +\n      \"://\" +\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n      port +\n      this.opts.path +\n      query\n    );\n  }\n}\n\nmodule.exports = Polling;\n"]},"metadata":{},"sourceType":"script"}