{"ast":null,"code":"import _objectSpread from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(BaseAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(BaseAudioContext);\n\n    function BaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, BaseAudioContext);\n\n      _this = _super.call(this, _nativeContext, numberOfChannels);\n      _this._nativeContext = _nativeContext;\n      _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: function addModule(moduleURL, options) {\n          return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n        }\n      };\n      return _this;\n    }\n\n    _createClass(BaseAudioContext, [{\n      key: \"audioWorklet\",\n      get: function get() {\n        return this._audioWorklet;\n      }\n    }, {\n      key: \"createAnalyser\",\n      value: function createAnalyser() {\n        return new analyserNodeConstructor(this);\n      }\n    }, {\n      key: \"createBiquadFilter\",\n      value: function createBiquadFilter() {\n        return new biquadFilterNodeConstructor(this);\n      }\n    }, {\n      key: \"createBuffer\",\n      value: function createBuffer(numberOfChannels, length, sampleRate) {\n        return new audioBufferConstructor({\n          length: length,\n          numberOfChannels: numberOfChannels,\n          sampleRate: sampleRate\n        });\n      }\n    }, {\n      key: \"createBufferSource\",\n      value: function createBufferSource() {\n        return new audioBufferSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createChannelMerger\",\n      value: function createChannelMerger() {\n        var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelMergerNodeConstructor(this, {\n          numberOfInputs: numberOfInputs\n        });\n      }\n    }, {\n      key: \"createChannelSplitter\",\n      value: function createChannelSplitter() {\n        var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelSplitterNodeConstructor(this, {\n          numberOfOutputs: numberOfOutputs\n        });\n      }\n    }, {\n      key: \"createConstantSource\",\n      value: function createConstantSource() {\n        return new constantSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createConvolver\",\n      value: function createConvolver() {\n        return new convolverNodeConstructor(this);\n      }\n    }, {\n      key: \"createDelay\",\n      value: function createDelay() {\n        var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return new delayNodeConstructor(this, {\n          maxDelayTime: maxDelayTime\n        });\n      }\n    }, {\n      key: \"createDynamicsCompressor\",\n      value: function createDynamicsCompressor() {\n        return new dynamicsCompressorNodeConstructor(this);\n      }\n    }, {\n      key: \"createGain\",\n      value: function createGain() {\n        return new gainNodeConstructor(this);\n      }\n    }, {\n      key: \"createIIRFilter\",\n      value: function createIIRFilter(feedforward, feedback) {\n        return new iIRFilterNodeConstructor(this, {\n          feedback: feedback,\n          feedforward: feedforward\n        });\n      }\n    }, {\n      key: \"createOscillator\",\n      value: function createOscillator() {\n        return new oscillatorNodeConstructor(this);\n      }\n    }, {\n      key: \"createPanner\",\n      value: function createPanner() {\n        return new pannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createPeriodicWave\",\n      value: function createPeriodicWave(real, imag) {\n        var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          disableNormalization: false\n        };\n        return new periodicWaveConstructor(this, _objectSpread(_objectSpread({}, constraints), {}, {\n          imag: imag,\n          real: real\n        }));\n      }\n    }, {\n      key: \"createStereoPanner\",\n      value: function createStereoPanner() {\n        return new stereoPannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createWaveShaper\",\n      value: function createWaveShaper() {\n        return new waveShaperNodeConstructor(this);\n      }\n    }, {\n      key: \"decodeAudioData\",\n      value: function decodeAudioData(audioData, successCallback, errorCallback) {\n        return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n          if (typeof successCallback === 'function') {\n            successCallback(audioBuffer);\n          }\n\n          return audioBuffer;\n        }, function (err) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(err);\n          }\n\n          throw err;\n        });\n      }\n    }]);\n\n    return BaseAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/base-audio-context-constructor.ts"],"names":[],"mappings":";;;;;;AAwBA,OAAO,IAAM,iCAAiC,GAAwC,SAAzE,iCAAyE,CAClF,qBADkF,EAElF,uBAFkF,EAGlF,sBAHkF,EAIlF,gCAJkF,EAKlF,2BALkF,EAMlF,4BANkF,EAOlF,8BAPkF,EAQlF,6BARkF,EASlF,wBATkF,EAUlF,gBAVkF,EAWlF,oBAXkF,EAYlF,iCAZkF,EAalF,mBAbkF,EAclF,wBAdkF,EAelF,kCAfkF,EAgBlF,yBAhBkF,EAiBlF,qBAjBkF,EAkBlF,uBAlBkF,EAmBlF,2BAnBkF,EAoBlF,yBApBkF,EAqBlF;AACA;AAAA;;AAAA;;AAGI,8BAAoB,cAApB,EAAoD,gBAApD,EAA4E;AAAA;;AAAA;;AACxE,gCAAM,cAAN,EAAsB,gBAAtB;AADgB,YAAA,cAAA,GAAA,cAAA;AAGhB,YAAK,aAAL,GACI,qBAAqB,KAAK,SAA1B,GACM,SADN,GAEM;AACI,QAAA,SAAS,EAAE,mBAAC,SAAD,EAAoB,OAApB,EAAiD;AACxD,iBAAO,qBAAqB,gCAAqB,SAArB,EAAgC,OAAhC,CAA5B;AACH;AAHL,OAHV;AAHwE;AAW3E;;AAdL;AAAA;AAAA,WAgBI,eAAgB;AACZ,eAAO,KAAK,aAAZ;AACH;AAlBL;AAAA;AAAA,aAoBW,0BAAc;AACjB,eAAO,IAAI,uBAAJ,CAAyC,IAAzC,CAAP;AACH;AAtBL;AAAA;AAAA,aAwBW,8BAAkB;AACrB,eAAO,IAAI,2BAAJ,CAA6C,IAA7C,CAAP;AACH;AA1BL;AAAA;AAAA,aA4BW,sBAAa,gBAAb,EAAuC,MAAvC,EAAuD,UAAvD,EAAyE;AAC5E,eAAO,IAAI,sBAAJ,CAA2B;AAAE,UAAA,MAAM,EAAN,MAAF;AAAU,UAAA,gBAAgB,EAAhB,gBAAV;AAA4B,UAAA,UAAU,EAAV;AAA5B,SAA3B,CAAP;AACH;AA9BL;AAAA;AAAA,aAgCW,8BAAkB;AACrB,eAAO,IAAI,gCAAJ,CAAkD,IAAlD,CAAP;AACH;AAlCL;AAAA;AAAA,aAoCW,+BAAsC;AAAA,YAAlB,cAAkB,uEAAD,CAAC;AACzC,eAAO,IAAI,4BAAJ,CAA8C,IAA9C,EAAqD;AAAE,UAAA,cAAc,EAAd;AAAF,SAArD,CAAP;AACH;AAtCL;AAAA;AAAA,aAwCW,iCAAyC;AAAA,YAAnB,eAAmB,uEAAD,CAAC;AAC5C,eAAO,IAAI,8BAAJ,CAAgD,IAAhD,EAAuD;AAAE,UAAA,eAAe,EAAf;AAAF,SAAvD,CAAP;AACH;AA1CL;AAAA;AAAA,aA4CW,gCAAoB;AACvB,eAAO,IAAI,6BAAJ,CAA+C,IAA/C,CAAP;AACH;AA9CL;AAAA;AAAA,aAgDW,2BAAe;AAClB,eAAO,IAAI,wBAAJ,CAA0C,IAA1C,CAAP;AACH;AAlDL;AAAA;AAAA,aAoDW,uBAA4B;AAAA,YAAhB,YAAgB,uEAAD,CAAC;AAC/B,eAAO,IAAI,oBAAJ,CAAsC,IAAtC,EAA6C;AAAE,UAAA,YAAY,EAAZ;AAAF,SAA7C,CAAP;AACH;AAtDL;AAAA;AAAA,aAwDW,oCAAwB;AAC3B,eAAO,IAAI,iCAAJ,CAAmD,IAAnD,CAAP;AACH;AA1DL;AAAA;AAAA,aA4DW,sBAAU;AACb,eAAO,IAAI,mBAAJ,CAAqC,IAArC,CAAP;AACH;AA9DL;AAAA;AAAA,aAgEW,yBAAgB,WAAhB,EAA+C,QAA/C,EAAyE;AAC5E,eAAO,IAAI,wBAAJ,CAA0C,IAA1C,EAAiD;AAAE,UAAA,QAAQ,EAAR,QAAF;AAAY,UAAA,WAAW,EAAX;AAAZ,SAAjD,CAAP;AACH;AAlEL;AAAA;AAAA,aAoEW,4BAAgB;AACnB,eAAO,IAAI,yBAAJ,CAA2C,IAA3C,CAAP;AACH;AAtEL;AAAA;AAAA,aAwEW,wBAAY;AACf,eAAO,IAAI,qBAAJ,CAAuC,IAAvC,CAAP;AACH;AA1EL;AAAA;AAAA,aA4EW,4BACH,IADG,EAEH,IAFG,EAG6E;AAAA,YAAhF,WAAgF,uEAA/B;AAAE,UAAA,oBAAoB,EAAE;AAAxB,SAA+B;AAEhF,eAAO,IAAI,uBAAJ,CAAyC,IAAzC,kCAAqD,WAArD;AAAkE,UAAA,IAAI,EAAJ,IAAlE;AAAwE,UAAA,IAAI,EAAJ;AAAxE,WAAP;AACH;AAlFL;AAAA;AAAA,aAoFW,8BAAkB;AACrB,eAAO,IAAI,2BAAJ,CAA6C,IAA7C,CAAP;AACH;AAtFL;AAAA;AAAA,aAwFW,4BAAgB;AACnB,eAAO,IAAI,yBAAJ,CAA2C,IAA3C,CAAP;AACH;AA1FL;AAAA;AAAA,aA4FW,yBACH,SADG,EAEH,eAFG,EAGH,aAHG,EAGiC;AAEpC,eAAO,gBAAe,CAAC,KAAK,cAAN,EAAsB,SAAtB,CAAf,CAAgD,IAAhD,CACH,UAAC,WAAD,EAAgB;AACZ,cAAI,OAAO,eAAP,KAA2B,UAA/B,EAA2C;AACvC,YAAA,eAAe,CAAC,WAAD,CAAf;AACH;;AAED,iBAAO,WAAP;AACH,SAPE,EAQH,UAAC,GAAD,EAAQ;AACJ,cAAI,OAAO,aAAP,KAAyB,UAA7B,EAAyC;AACrC,YAAA,aAAa,CAAC,GAAD,CAAb;AACH;;AAED,gBAAM,GAAN;AACH,SAdE,CAAP;AAgBH;AAjHL;;AAAA;AAAA,IAA0D,kCAA1D;AAmHH,CAzIM","sourceRoot":"","sourcesContent":["export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                        addModule: (moduleURL, options) => {\n                            return addAudioWorkletModule(this, moduleURL, options);\n                        }\n                    };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData).then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            }, (err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=base-audio-context-constructor.js.map"]},"metadata":{},"sourceType":"module"}