{"ast":null,"code":"import _classCallCheck from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/devsoni/Desktop/Instrument-Visualizer-Project/client/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\n\nexport var Limiter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Limiter, _ToneAudioNode);\n\n  var _super = _createSuper(Limiter);\n\n  function Limiter() {\n    var _this;\n\n    _classCallCheck(this, Limiter);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    _this.name = \"Limiter\";\n    var options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    _this._compressor = _this.input = _this.output = new Compressor({\n      context: _this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    _this.threshold = _this._compressor.threshold;\n    readOnly(_assertThisInitialized(_this), \"threshold\");\n    return _this;\n  }\n\n  _createClass(Limiter, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Limiter.prototype), \"dispose\", this).call(this);\n\n      this._compressor.dispose();\n\n      this.threshold.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        threshold: -12\n      });\n    }\n  }]);\n\n  return Limiter;\n}(ToneAudioNode);","map":{"version":3,"sources":["../../../../Tone/component/dynamics/Limiter.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAgC,aAAhC,QAA2E,kCAA3E;AAEA,SAAS,oBAAT,QAAqC,0BAArC;AACA,SAAS,UAAT,QAA2B,cAA3B;AAEA,SAAS,QAAT,QAAyB,2BAAzB;AAIC;AAED;;;;;;;;;;AAUG;;AACH,WAAa,OAAb;AAAA;;AAAA;;AAmBC,qBAAA;AAAA;;AAAA;;AACC,8BAAM,MAAM,CAAC,MAAP,CAAc,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAAlC,CAAN;AAlBQ,UAAA,IAAA,GAAe,SAAf;AAmBR,QAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,CAAC,WAAR,EAAD,EAAwB,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAApC;AAEA,UAAK,WAAL,GAAmB,MAAK,KAAL,GAAa,MAAK,MAAL,GAAc,IAAI,UAAJ,CAAe;AAC5D,MAAA,OAAO,EAAE,MAAK,OAD8C;AAE5D,MAAA,KAAK,EAAE,EAFqD;AAG5D,MAAA,MAAM,EAAE,KAHoD;AAI5D,MAAA,OAAO,EAAE,IAJmD;AAK5D,MAAA,SAAS,EAAE,OAAO,CAAC;AALyC,KAAf,CAA9C;AAQA,UAAK,SAAL,GAAiB,MAAK,WAAL,CAAiB,SAAlC;AACA,IAAA,QAAQ,gCAAO,WAAP,CAAR;AAbD;AAcC;;AAjCF;AAAA;AAAA;AAyCC;;;AAGG;AACH,mBAAa;AACZ,aAAO,KAAK,WAAL,CAAiB,SAAxB;AACA;AA/CF;AAAA;AAAA,WAiDC,mBAAO;AACN;;AACA,WAAK,WAAL,CAAiB,OAAjB;;AACA,WAAK,SAAL,CAAe,OAAf;AACA,aAAO,IAAP;AACA;AAtDF;AAAA;AAAA,WAmCC,uBAAkB;AACjB,aAAO,MAAM,CAAC,MAAP,CAAc,aAAa,CAAC,WAAd,EAAd,EAA2C;AACjD,QAAA,SAAS,EAAE,CAAC;AADqC,OAA3C,CAAP;AAGA;AAvCF;;AAAA;AAAA,EAA6B,aAA7B","sourceRoot":"","sourcesContent":["import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport class Limiter extends ToneAudioNode {\n    constructor() {\n        super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n        this.name = \"Limiter\";\n        const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n        this._compressor = this.input = this.output = new Compressor({\n            context: this.context,\n            ratio: 20,\n            attack: 0.003,\n            release: 0.01,\n            threshold: options.threshold\n        });\n        this.threshold = this._compressor.threshold;\n        readOnly(this, \"threshold\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            threshold: -12\n        });\n    }\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    get reduction() {\n        return this._compressor.reduction;\n    }\n    dispose() {\n        super.dispose();\n        this._compressor.dispose();\n        this.threshold.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Limiter.js.map"]},"metadata":{},"sourceType":"module"}